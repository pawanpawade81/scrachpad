from pygwalker.api.streamlit import StreamlitRenderer, init_streamlit_comm
import pandas as pd
import streamlit as st
import os
import seaborn as sns
from streamlit_chat import message
from pandasai.llm.openai import OpenAI
from pandasai import PandasAI
import tempfile

import agent
import module
# Adjust the width of the Streamlit page
st.set_page_config(
    page_title="Use Pygwalker In Streamlit",
    layout="wide"
)

cm = sns.light_palette("green", as_cmap=True)

# Initialize pygwalker communication
init_streamlit_comm()

# Title of the app
st.title("Upload File for Visualization")

# Add a file uploader
uploaded_file = st.file_uploader("Choose a file", type=["csv"])

user_api_key = st.text_input(
    label="#### Your OpenAI API key 👇🏼",
    placeholder="Paste your openAI API key, sk-",
    type="password")

# You should cache your pygwalker renderer, if you don't want your memory to explode
renderer= None
df = None
if uploaded_file:
    st.write("### 🍩 Data preview")
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        tmp_file_path = tmp_file.name

    df = pd.read_csv(uploaded_file)

    col11, col12, col13 = st.columns(spec=3, gap='medium')
    
    with col11: 
        index_col = st.selectbox("Select the index column", list(df.columns)[:1] + [None] + list(df.columns)[1:])
    with col12: 
        heighlight = st.selectbox("Hightlight on", [None, "rows", "column", "both"])
    with col13: 
        precision = st.selectbox("Precision to", [0, 1, 2, 4])

    if index_col:
        df.set_index(index_col, inplace=True)

    if heighlight in ["rows", "column"]:
        styled_df = df.style.format(precision=precision).highlight_max(axis=1 if heighlight == "rows" else 0, 
                    props='color:white; font-weight:bold; background-color:purple;')
        st.dataframe(styled_df)
    elif heighlight == "both":
        styled_df = df.style.format(precision=precision).background_gradient(cmap=cm)
        st.dataframe(styled_df)
    else:
        st.dataframe(df)
    #@st.cache_resource
    def get_pyg_renderer(df_in) -> "StreamlitRenderer":
       # df = pd.read_csv(uploaded_file)
        # When you need to publish your application, you need set `debug=False`,prevent other users to write your config file.
        return StreamlitRenderer(df_in,  debug=True)
    renderer = get_pyg_renderer(df_in=df)
   


st.subheader("Display Explore UI")

tab1, tab2, tab3, tab4 = st.tabs(
    ["graphic walker", "data profiling", "Chat With Data", "Profile Data"]
)

with tab1:
    if renderer is None:
        st.error("failed to upload file or render file.Try to upload files once")
    else:
    # Assuming StreamlitRenderer has some method like render() to verify its functionality
        if isinstance(renderer, StreamlitRenderer):
            #st.success("Renderer is a valid StreamlitRenderer object.")
            renderer.explorer() # Example usage
        else:
            st.error("Renderer is not a valid StreamlitRenderer object.")
    

with tab2:
    if renderer is None:
        st.error("failed to upload file or render file.Try to upload files once")
    else:
    # Assuming StreamlitRenderer has some method like render() to verify its functionality
        if isinstance(renderer, StreamlitRenderer):
            st.success("Renderer is a valid StreamlitRenderer object.")
            renderer.explorer(default_tab="data", key="pyg_explorer_1") # Example usage
        else:
            st.error("Renderer is not a valid StreamlitRenderer object.")


with tab3:
    st.subheader("🍪 Talk to your data!")
    message("Hi there! 👋🏼 Set up your API KEY before talk!", avatar_style="big-smile")

    if uploaded_file:

        if user_api_key:

            # conversational_chat = agent.create_conversational_chat(filename=tmp_file_path, api_key=user_api_key)
            # conversational_chat = agent.create_homemake_chatbot(df=df, api_key=user_api_key)
            conversational_chat = agent.create_pandasai_chat(df=df, api_key=user_api_key)

            
            if 'history' not in st.session_state:
                st.session_state['history'] = []

            if 'generated' not in st.session_state:
                st.session_state['generated'] = ["Hello! Ask me anything about " + uploaded_file.name + " 🤗"]

            if 'past' not in st.session_state:
                st.session_state['past'] = ["Hey! 👋"]
                
            #container for the chat history
            response_container = st.container()
            #container for the user's text input
            container = st.container()

            with container:
                with st.form(key='my_form', clear_on_submit=True):
                    
                    user_input = st.text_input("Question:", placeholder="Talk about your data here : )", key='input')
                    submit_button = st.form_submit_button(label='Send')
                    
                if submit_button and user_input:
                    output = conversational_chat(user_input)
                    
                    st.session_state['history'].append((user_input, output))
                    st.session_state['past'].append(user_input)
                    st.session_state['generated'].append(output)

            if st.session_state['generated']:
                with response_container:
                    for i in range(len(st.session_state['generated'])):
                        message(st.session_state["past"][i], is_user=True, key=str(i) + '_user', avatar_style="big-smile", seed="openedSmile")
                        message(st.session_state["generated"][i], key=str(i), avatar_style="big-smile")
with tab4:
    if uploaded_file:
        if df is None:
            st.write("No Profiling")
        else:
            from ydata_profiling import ProfileReport
            from streamlit_pandas_profiling import st_profile_report
            @st.cache_resource
            def generate_profile_report(dataframe):
                return ProfileReport(dataframe, title="Profiling Report", explorative=True)
            pr = generate_profile_report(df)
            #st.components.v1.html(pr.to_html(), height=1000, scrolling=True)
            #pr = ProfileReport(df)
            st_profile_report(pr)
  pygwalker==0.4.9.4a0
pandas==1.5.3
streamlit
langchain==0.0.191
openai==0.27.6
faiss-cpu==1.7.4
tiktoken==0.4.0
plotly==5.13.1
pandasai==0.6.2
ydata-profiling
streamlit_pandas_profiling==0.1.3                                                                   
